@using CinemaRoomEditor.Data
@using DataAccessLibrary.Models
@implements IDisposable
@*@inject ICreatorStateService CreatorState*@

<div class="grid-item @(ApplyGhostEffect==true?"hoverEffect":"")" @onmousedown='(e)=>HandleMouse(e,"down")' @onmouseup='(e)=>HandleMouse(e,"up")' @onmouseover='(e)=>HandleMouse(e,"over")'>
    @if(HasSeat)
    {
        <img src='@seatSource' class="cell-image @(ApplyGhostEffect==true?"opacity-50":"")" draggable="false" />
        if (DisplayNumber != -1)
        {
            <span class="cell-text text-focus-in @(ApplyGhostEffect==true?"opacity-50":"")">@DisplayNumber</span>
        }
    }
   
</div>

@code {
    [ParameterAttribute]
    public EventCallback<Cell> OnMouseDown { get; set; }
    [ParameterAttribute]
    public EventCallback<Cell> OnMouseUp { get; set; }
    [ParameterAttribute]
    public EventCallback<Cell> OnMouseOver { get; set; }
    [ParameterAttribute]
    public EventCallback<Cell> DemandSeatDeletion { get; set; }
    [Parameter]
    public bool? ApplyGhostEffect { get; set; }
    [Parameter]
    public int Col { get; set; }
    [Parameter]
    public int Row { get; set; }
    [Parameter]
    public int DisplayNumber { get; set; }
    private bool hasSeat;
    public bool HasSeat{ 
        get
        {
            return hasSeat;
        }
        set
        {
            hasSeat = value;
            StateHasChanged();
        }
    }
    string? seatSource;
    [Parameter]
    public string? SeatSource{
        get
        {
            return seatSource;
        }
        set
        {
            seatSource = value;
            if (seatSource == String.Empty)
            {
                HasSeat = false;
            }
            else
            {
                HasSeat = true;
            }

        }
    }
    private void HandleMouse(MouseEventArgs e, string mouseState)
    {
        if(e.Button==0L)
        {
            SendMouseInformation(mouseState);
        }
    }
    private void SendMouseInformation(string mouseState)
    {
        switch(mouseState)
        {
            case "up":
                OnMouseUp.InvokeAsync(this);
                break;
            case "down":
                OnMouseDown.InvokeAsync(this);
                break;
            case "over":
                OnMouseOver.InvokeAsync(this);
                break;
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            if(HasSeat)
            StateHasChanged();
        }
    }
    public void Dispose()
    {
        if(HasSeat)
        {
            DemandSeatDeletion.InvokeAsync(this);
        }
    }
    
}
