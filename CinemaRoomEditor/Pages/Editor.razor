@page "/editor"
@page "/editor/{roomIdString}"
@page "/editor/{roomIdString}/{viewMode}"
@using CinemaRoomEditor.Components
@using CinemaRoomEditor.Data
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Text.Json
@inject ICinemaData _db
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
<PageTitle>Room Editor</PageTitle>

<div class="room-editor">

    <div class="cinema-layout">
        <div class="grid-container">
            @if (renderEditor == true)
            {
                <Grid NumColumns="room.NumColumns" NumRows="room.NumRows" room="room" Editing='(viewMode=="viewing"?false:true)' @ref="grid" />
            }

        </div>
    </div>
    <div class="room-editor-panel flex-column">
        <EditForm Model="@room">
            <div class="form-group">
                <label for="roomName">Name of Room</label>
                <InputText id="roomName" class="form-control" @bind-Value="@room.Name" disabled=@(viewMode=="viewing"?true:false) />
            </div>
            <div class="form-group">
                <label for="numRows">Number of Rows</label>
                <InputNumber id="numRows" class="form-control" @bind-Value="@room.NumRows" disabled=@(viewMode=="viewing"?true:false) />
            </div>
            <div class="form-group">
                <label for="numColumns">Number of Columns</label>
                <InputNumber id="numColumns" class="form-control" @bind-Value="@room.NumColumns" disabled=@(viewMode=="viewing"?true:false) />
            </div>
        </EditForm>
        @if (viewMode != "viewing" && grid != null)
        {
            <EditForm Model="grid">
                <InputRadioGroup TValue="string" @bind-Value="grid.SelectedSeatType" class="form-group">
                    <label for="seatSelection">Seat Type Selection</label>
                    <div class="form-check">
                        <InputRadio id="none" class="form-check-input" Value=@("None") />
                        <label class="form-check-label" for="none">Seat Remover</label>
                    </div>
                    <div class="form-check">
                        <InputRadio id="single" class="form-check-input" Value=@("Single") />
                        <label class="form-check-label" for="single">Single Seat</label>
                    </div>
                    <div class="form-check">
                        <InputRadio id="double" class="form-check-input" Value=@("Double") />
                        <label class="form-check-label" for="double">Double Seat</label>
                    </div>
                    <div class="form-check">
                        <InputRadio id="single_accessible" class="form-check-input" Value=@("Single_Accessible") />
                        <label class="form-check-label" for="single_accessible">Accessible Seat</label>
                    </div>
                </InputRadioGroup>
            </EditForm>


            <div class="form-group">

                @if (editingExistingRoom)
                {
                    <button type="submit" class="btn btn-primary m-1" @onclick="@InsertRoom">Save as new</button>
                    <button type="button" class="btn btn-secondary m-1" @onclick="@UpdateRoom">Update</button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary m-1" @onclick="@InsertRoom">Save</button>
                }
            </div>
        }
        else
        {
            <div class="form-group m-4">
                <button type="button" class="btn btn-primary m-1" @onclick="()=>RedirectToRoomList(room.Id)">Go back</button>
                <button type="button" class="btn btn-secondary m-1" @onclick='()=>ChangeViewingMode(room.Id,"editing")'>Edit</button>
            </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public string? roomIdString { get; set; }
    [Parameter]
    public string? viewMode { get; set; }
    int roomId;
    bool editingExistingRoom = false;
    bool renderEditor = false;

    List<RoomModel>? roomsData;
    RoomModel room;
    Grid? grid;

    public Editor()
    {
        grid = new Grid();
        room = new RoomModel();
    }
    private async Task InsertRoom()
    {
        if (grid == null) return;
        room.SeatsJson = grid.GetSeatsJson();
        room.Id = await _db.InsertRoom(room);
        editingExistingRoom = true;
    }
    private async Task UpdateRoom()
    {
        if (grid == null) return;
        room.SeatsJson = grid.GetSeatsJson();
        await _db.UpdateRoom(room);
    }
    private void RedirectToRoomList(int id)
    {
        NavigationManager.NavigateTo("Database#" + id.ToString());
    }
    private void ChangeViewingMode(int id,string viewingMode)
    {
        NavigationManager.NavigateTo("Editor/"+id.ToString()+"/"+viewingMode);
    }
    //async void WheelHandler(WheelEventArgs e)
    //{
    //    if (e.DeltaY > 0)
    //        await Zoom(0.1f);
    //    else if (e.DeltaY < 0)
    //        await Zoom(-0.1f);


    //}
    //async Task Zoom(float amount)
    //{
    //    await JS.InvokeVoidAsync("zoom", amount);
    //}
    //async Task ZoomOut()
    //{
    //    await JS.InvokeVoidAsync("BlazorJSFunctions.zoom", -0.5f);
    //}
    //async Task ZoomIn()
    //{
    //    await JS.InvokeVoidAsync("BlazorJSFunctions.zoom", 0.5f);
    //}

    protected override void OnInitialized()
    {
        editingExistingRoom = false;
        grid = new Grid();
        room = new RoomModel();
    }
    protected override async Task OnInitializedAsync()
    {
        if (roomIdString is not null)
        {
            if (Int32.TryParse(roomIdString, out roomId))
            {
                roomsData = await _db.GetRooms();
                RoomModel? roomTemp = roomsData.Find(room => room.Id == roomId);
                if (roomTemp is not null)
                {
                    room = roomTemp;
                    editingExistingRoom = true;
                }
            }
        }
        else
        {
            room.NumColumns = 20;
            room.NumRows = 10;
        }

        renderEditor = true;

    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (room is not null)
            {

            }
            StateHasChanged();
        }
    }
}
